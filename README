Example JKISS pseudo random number generator implementation for Objective-C.
Which, becoming Swift, missed the chance for a good set of Objective NOC NOC
jokes. Otherwise this code may be practical for e.g. games that need to "roll a
six-sided die" or the like. The /dev/random device is used to setup the seeds,
so at least that should not be too horrible, or you can set the seeds manually.

JKISS RNG borrowed from public domain code in "Good Practice in (Pseudo)
Random Number Generation for Bioinformatics Applications" by David Jones
(Last revision May 7th 2010); this article is probably otherwise required
reading, as there are various concerns depending on what application the PRNG
will be used for.

An implementation after the various requisite manoeuvres in XCode are complete
might run something like:

  #import "JKISSprng.h"

  ...
  JKISSprng *fate = [[JKISSprng alloc] init];
  
  if([fate twizzleSeeds:NULL] == NO) {
      NSLog(@"could not init JKISS seed");
      exit(EXIT_FAILURE);
  }
  // or manually set the seed values (see code for things to avoid)
  //[fate setSeedX:1 SeedY:1 SeedZ:2 SeedC:0];
  
  NSLog(@"32bit integer - %u", [fate randomNumber]);
  // Note that formats that round randomFloat diminish the odds for 0.0 or
  // 1.0, see below
  NSLog(@"0.0 though 1.0 inclusive - %.3f", [fate randomFloat]);
  NSLog(@"d20 - %u", [fate rollD:20]);

The "rollD" method should only be used with small values, as numbers up near
the maximum might run into modulo bias problems or other edge cases; test and
find out if this will be a concern. There are also methods that pull random
elements from a NSArray or NSSet. The included jkissprng(1) utility may also
be of use.


ADDING ENTROPY

The PRNG will march through the progression dictated by the seed variables; one
way to fiddle with these over time is via a timer; see the randtimertest/
directory for sample code that might be adapted to change one of the random
seeds over time. This will not suit games that need a reproducible seed for one
reason or another, for example tournaments, though may otherwise increase
randomization.


STATISTICAL TESTS

 * randomFloat shows bias away from 0.00 and 1.00; these are half as likely
   as the other "%.2f" formatted randomFloat results.

     $ jkissprng -c100000 randomFloat 2 > freq
     $ R
     > stuff=read.table("freq")
     > tab=table(stuff)
     > barplot(tab)
     > chisq.test(tab, p=rep(1/length(tab), length(tab)))
     
             Chi-squared test for given probabilities
     
     data:  tab
     X-squared = 548.3603, df = 100, p-value < 2.2e-16
     
     > 

   I believe this is an artifact of the printf rounding, as 0.00 and 1.00 can
   only be rounded to from half as many numbers as the rest of the numbers in
   the interior of the series. Using randomFloat directly should be fine;
   running the result through a rounding function first will introduce bias
   unfavorable to 0.00 and 1.00.

 * randomArrayMember, randomSetMember, rollD (for small rolls, e.g. 6 or 20 or
   100) show no obvious bias via eyeballing the plot() in R though this will
   need better confirmation than that. Twenty values, picking random member:

     % perl -E 'say for 1..20' \
       | jkissprng -R 5000 -c 1000000 randomArrayMember | r-fu equichisq 

             Chi-squared test for given probabilities
     
     data:  tab
     X-squared = 17.7504, df = 19, p-value = 0.5392

 * Adding entropy via a periodic timer is an okay source on a Mac OS X laptop
   using NSTimer and pulling the LSB off of the gettimeofday(2) tv_usec value,
   for an otherwise idle laptop on AC power:

             Chi-squared test for given probabilities
  
     data:  tab
     X-squared = 239.7096, df = 255, p-value = 0.7458

   Though, test, YMMV, etc.
